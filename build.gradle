apply plugin: 'java'
apply plugin: 'java-library'
apply from: "$rootDir/depend.gradle"

group = 'com.livk'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def managementMavenBom = project.ext.mavenBom
def managementDependency = project.ext.dependency
def implementationDependency = project.ext.implementation
def annotationProcessorDependency = project.ext.annotationProcessor
def testImplementationDependency = project.ext.testImplementation
def compileOnlyDependency = project.ext.compileOnly
def testCompileOnlyDependency = project.ext.testCompileOnly
def testAnnotationProcessorDependency = project.ext.testAnnotationProcessor

buildscript {
    apply from: "$rootDir/config.gradle"

    repositories {
        mavenLocal()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-snapshot/' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/release'}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {

    repositories {
        mavenLocal()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-snapshot/' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/release'}
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:none" << "-nowarn" << "-Xlint:unchecked"
        options.encoding = "UTF-8"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            managementMavenBom.each(v -> mavenBom v)
        }
        dependencies {
            managementDependency.each(v -> dependency v)
        }
    }

    dependencies {
        implementationDependency.each { v -> implementation v }
        annotationProcessorDependency.each { v -> annotationProcessor v }
        testImplementationDependency.each { v -> testImplementation v }
        compileOnlyDependency.each { v -> compileOnly v }
        testCompileOnlyDependency.each { v -> testCompileOnly v }
        testAnnotationProcessorDependency.each { v -> testAnnotationProcessor v }
    }
}

test {
    useJUnitPlatform()
}
